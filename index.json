[{"authors":["admin"],"categories":null,"content":"A happy geek: I love learning new skills and enjoy building large systems, almost just for the sake of it. Software Engineer with experience in all levels of projects, including design and architecture, development and test, and the setup of reliable production. Skilled at writing well designed low-level system programs using best practices in Go, C, C++. Fast learner, hard worker, and team player with flexibility using various tools. Dedicated to streamlining processes and efficiently resolving project issues in hand using the most adapted technology.\n \u0026ldquo;As the sun does not wait for prayers and incantations to be induced to rise, but immediately shines and is saluted by all, so do you also not wait for clappings of hands and shouts praise to be induced to do good, but be a doer of good voluntarily and you will be beloved as much as the sun.\u0026rdquo; Epictetus\n ","date":1590451200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1590451200,"objectID":"3f810ab074eda379e66f099fad5e8db8","permalink":"/authors/valentin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/valentin/","section":"authors","summary":"A happy geek: I love learning new skills and enjoy building large systems, almost just for the sake of it. Software Engineer with experience in all levels of projects, including design and architecture, development and test, and the setup of reliable production. Skilled at writing well designed low-level system programs using best practices in Go, C, C++. Fast learner, hard worker, and team player with flexibility using various tools. Dedicated to streamlining processes and efficiently resolving project issues in hand using the most adapted technology.","tags":null,"title":"","type":"authors"},{"authors":null,"categories":null,"content":"Introduction This is a summary of \u0026ldquo;How to Win Friends and Influence People\u0026rdquo; by Dale Carnegie. The goal of this book is obviously stated by its title 😜. Although at first sight, you might believe this is achieved by tricking others, actually the basic answer is very simple: just give your honest appreciation to others. See the world with their eyes, understand them, and sincerely try to help them.\n The principles taught in this book will work only when they come from the heart. I am not advocating a bag of tricks. I am talking about a new way of life.\n However, even though this is simple in principle, it is quite far from our first instinct. We tend to focus on ourselves, and me the first. So here I want to make a kind checklist from the book 📃. This way anyone can quickly go through it regularly and be sure to always have it fresh in their mind. I would still recommend reading the book if you haven\u0026rsquo;t done so. It will be easier to get in Carnegie\u0026rsquo;s mindset this way.\n The Fundamentals In this first part, Carnegie explains the base principles to apply. Then in the following parts, the author gives more specific and directly applicable advice.\n1. Never Criticize When criticizing, you run the risk of turning people against yourself, for the improbable upside of getting them to do what you want. It rarely works and is very likely to backfire on you.\n2. Praise People  \u0026ldquo;I consider my ability to arouse enthusiasm among my people the greatest asset I possess, and the way to develop the best that is in a person is by appreciation and encouragement. [\u0026hellip;] I believe in giving incentives to work.\u0026rdquo; Charles Schwab\n For most people, a priority in life is to feel important. By providing them with this feeling, you give them a reason to do what you want. Just give them your honest appreciation for their person or their action and they will feel their importance.\n3. Arouse an Eager Want No one cares about what you want. People care about their interests. To be able to influence others, you need to understand what matters to them. And once you identified their needs, you show them how to get it. First, arouse an eager want, then show them how to obtain it.\nExample when in an apparent contradiction:\n Start positive. But \u0026hellip; describe the problem for them. Explain a solution for them.   Make People Love You Now let\u0026rsquo;s get into the more practical advice.\n1. Show Genuine Interest  A dog makes his living by giving nothing to you but love.\n Basically, just show genuine love to others. It can be in little things, like daily greetings. Do things for others. Give them time, energy and thoughtfulness. Before you know it, they will have given it back to you.\nCareful though: always be sincere.\n2. Smile  It cost nothing but creates much.\n  You must have a good time meeting people if you expect them to have a good time meeting you.\n 3. Call People by Name People place big importance on their own name. Remember it and call it easily.\n4. Be an Active Listener Everyone wants an opportunity to expand their ego. So give them an opportunity to do so by actively listening to them. Be interested: Ask questions, encourage them to talk.\nLetting people talk is a favor to them: it helps clarify their minds.\n5. Find and Talk about Their Interest  Talking in terms of the other person\u0026rsquo;s interest pays off for both parties.\n 6. Make Others Feel Important  Every man I meet is my superior in some way. In that, I learn of him.\n Honestly admire others. We all crave for importance. Give to others what you would like to be given → To apply all the time!\n Change People Thinking 1. You Cannot Win an Argument  You can\u0026rsquo;t win an argument. If you lose it, you lose it; If you win it, you lose it.\n Arguing only creates resentment. The other person may do what you want, but they won\u0026rsquo;t do it with goodwill. They won\u0026rsquo;t change their way of thinking. Just never tell them they are wrong. At least partially agree with them. Make them feel good. Promise to consider their position. Show respect for their opinion.\n If you are going to prove anything, don\u0026rsquo;t let anybody know it. Do it subtly. [\u0026hellip;] With a few low-keyed suggestions at proper intervals, I let them develop my system themselves.\n 2. Willfully Admit when you are Wrong It is also quite likely that you are wrong. It happens surprisingly often. And when we catch ourselves, let\u0026rsquo;s admit it quickly and with enthusiasm. It will surprise others and put them in a non-fighting mindset. Astonishingly, we may get more from them this way.\n3. Begin Friendly At the start of the conversation or presentation, start in a \u0026ldquo;friendly mode\u0026rdquo;. It will prime people with a positive mindset. They will be more inclined to see the good side of what you say.\n4. The \u0026ldquo;Yes, yes\u0026rdquo; Technique Famously used by Socrates: He often began conversation emphasizing the thing which he knew the other person will agree with. Seeking others agreement with a question forces to commit to your side. It creates a good atmosphere and makes it easier for them to accept new ideas.\n5. Let Others Talk This will make sure you understand them. If you talk too much and do not give the others enough opportunity to express themselves, you might use the wrong arguments. Ones that don\u0026rsquo;t matter to them. Just restrain yourself to an active listener position.\nEven better, if you are subtle enough to guide them in their talk, you can make suggestions and give them the feeling of ownership of ideas that you provide them. Once they feel it is their idea, they will become their strong supporter.\n6. Understand Others Point of View  Do not condemn them. Any fool can do that. Try to understand them.\n This is really the key to this book. Try to see things as others experience them. This is the best way to find how to change their mind.\n Cooperativeness in conversation is achieved when you show that you consider the other person\u0026rsquo;s ideas and feelings as important as your own.\n Everyone craves for the sympathy of other people. Be sympathetic to their ideas. Welcome them with an open mind.\n7. Appeal to Nobler Motives  \u0026ldquo;A person usually has two reasons for doing something: one that sounds good, and a real one\u0026rdquo; J.P. Morgan\n If you want to change people, appeal to their nobler motives. People are honest and fair, or at least they want to feel so.\n8. Dramatize, use Showmanship It makes your idea more vivid. It makes abstractions more concrete and thus easier to grasp. Numbers or concepts do not stick.\n9. Challenge People Carnegie advices using this when nothing else works. Stimulating competition, challenging people will drive their desire to excel. In the end, we are all motivated to do the best we can in the task we achieve.\n Being A Leader How to change people without offending them or causing resentment?\n1. Always Begin with Praise Only critic after you praised. You will have set yourself as a friendly figure and thus your point will be received with a more positive mind.\n2. Praise the Slight Improvement Praise as the power to inspire people to go beyond what they thought they could do. The more you use this power, the more they will feel encouraged.\nBe specific in your praise. It shows the other you are really sincere. Your words are not empty, they have substance because you can precisely point what is praiseworthy.\n When criticism is minimized and praise emphasized, the good things people do will be reinforced, and the poorer things will atrophy for lack of attention.\n 3. Fake It Till They Make It If you show you believe someone has a virtue, state it openly, they will want to live up to the reputation you have given them! It will motivate them, give them a challenge.\nPlus, whenever they make mistakes, minimize it. Make it look like a small thing, like something easy to overcome. They may discover something they thought was hard, it actually easy for them once you give them the strength to go beyond their limits.\n4. Criticize Indirectly This one is harder to grasp. Basically, if you point mistakes directly, people may resent you. Instead, only suggest it indirectly. Make the other person understand your point by going around it. The danger is that you wander off too far from your target and that they do not see the point you critic at all.\nAn example from the book I found quite helpful: A guy wrote a speech and asks the opinion of his wife on it. The speech was quite bad because it would not flow well as a spoken performance. Instead of directly saying so, his wife said that it would make an excellent article. Praising it while making it clear that it would be a boring speech.\n5. Start by Stating Your Mistakes We have seen several starting tips so far. The way you start is important, it sets the mood. It can open or close the mind of the other person. So if you begin talking by criticizing yourself, you communicate to the other that you are a fair and humble person. You are not a distant boss too full of himself.\n It isn\u0026rsquo;t nearly so difficult to listen to a recital of your faults if the person criticizing begins by humbly admitting that he, too, is far from impeccable.\n 6. The Power of Suggestions No one likes to receive orders. So instead, try to only suggest a way of doing. Ask them questions that only hint at what you think would be a good way of proceeding. People will be much happier doing things if they feel it is their decision. Or at least that they are involved in the decision process.\nPlus, always try to understand what benefits them. Why would they be happy of following your suggestions? How would it benefit them? Sincerely try to match what would be a good outcome for them with what you want to be accomplished. This way, others may be happy of doing what you suggest.\n7. Let Others Save Face  I have no right to say or do anything that diminishes a man in his own eyes. What matters is not what I think of him, but what he thinks of himself. Hurting a man dignity is a crime.\u0026rdquo; Antoine de Saint-Exupéry.\n If you destroy other people\u0026rsquo;s ego, they will always resent you and never follow you.\n Conclusion All these points are simple one by one. But all together they create a system of communication which doesn\u0026rsquo;t come easily. It\u0026rsquo;s important to practice it as much as possible. In all our interactions. And they are many recommendations, so it\u0026rsquo;s hard to keep them all in mind. So come back to this list regularly to refresh your mind 😉.\n","date":1597881600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597881600,"objectID":"8659d64810adb56868f62e26b379d612","permalink":"/post/carnegie/","publishdate":"2020-08-20T00:00:00Z","relpermalink":"/post/carnegie/","section":"post","summary":" This is a **checklist** of the advice given by Dale Carnegie in his famous book, 'How to Win Friends and Influence People'. The book starts with three general principles followed by more practical advice. Although the whole idea of being nice to others, considering their opinion (etc..) is quite simple in theory, it is not our first instinct and it is hard to put into practice. So I thought making a **short checklist** to regularly refresh our minds could be beneficial to all. ","tags":null,"title":"Checklist of 'How to Win Friends and Influence People'","type":"post"},{"authors":null,"categories":null,"content":"Quick Summary We all want to predict the future. Once we know what will happen, we can prepare and take advantage of the situation and become stronger. For example, if you know which stock will go up/down, you would make a lot of money. The ability to predict is the foundation of science: experiment to find models that can forecast the future. Nassim Taleb destroyed this idea in his book \u0026ldquo;The Black Swan\u0026rdquo;: The most impactful events, the game changers, are unpredictable. Although we often use post-rationalization to make it look like we could have foreseen the events after the fact. For example, the 9/11 attack.\nIn \u0026ldquo;Antifragile: Things That Gain from Disorder\u0026rdquo;, Taleb explains what we can do when we cannot predict the future but know it will change everything big time. The answer is in the title: we should build antifragile system. We know there will be shocks. Instead of predicting these shocks themselves and lowering their consequences, we make systems that take advantage of them! Systems that get stronger thanks to the shocks.\nPersonal Impact Taleb directly speaks to me. While working doing research on Ankou and Entropic, I often confronted with this idea of how to deal with extremely rare events. In 2019, I got passionate about \u0026ldquo;Complex System\u0026rdquo; theory: system with so many inner interactions that their behavior cannot be well understood. I tried to read as much as possible on the subject: Geoffrey West, John Holland, Stuart Kauffman, and some others. I tried to understand \u0026ldquo;what can we do in this situation\u0026rdquo;.\nBasically, we cannot use the usual scientific approach of decomposing systems and then scaling up this understanding to predict the behavior of the whole system. Complex systems can only be characterized with high level statistical descriptors like entropy. We are limited to description, we cannot predict. And Taleb\u0026rsquo;s insight is a similar one: Complex systems, due to their many interactions have hidden, unforeseeable and non-linear behaviors. Their causal opacity and non-linearity make them perfect Black Swan generators. And guess what, almost everything we deal with nowadays is complex systems, are socio-economical system, most of the product we engineer (that\u0026rsquo;s why we can\u0026rsquo;t seem to solve all bugs), and of course nature itself.\nSolution We should stop trying to be smart. Stop trying to predict how systems are going to react to this or that shock. We should go back to our real goal: the payoff. Focus back on what we get in the end. If we put ourselves in an antifragile situation, we can benefit from future shocks, but we do not need to plan for them.\nThe Importance of Options  \u0026ldquo;Optionality is a substitute for intelligence.\u0026rdquo;\n  \u0026ldquo;The option is an agent of antifragility.\u0026rdquo;\n So how do we make ourselves antifragile? We give ourselves options. We often try to cut all which seems unnecessary, or redundant, to perform better at some given metric. But maybe this metric won\u0026rsquo;t be so important tomorrow. By having options, you give yourself more paths to explore in the future when you\u0026rsquo;ll get more information.\nTaleb likes to use the \u0026ldquo;rational flâneur\u0026rdquo; metaphor: when you travel, instead of having a two week plan of how you\u0026rsquo;ll visit this city or this country, you just plan a few days forward. This way you have the freedom to plan the rest of the trip when you acquire more information while you are already there. You don\u0026rsquo;t know what kind of information you will acquire, you don\u0026rsquo;t know what unexpected event can occur. By keeping a maximum of options available, you make sure that whatever happens, you\u0026rsquo;ll be able to transform to your benefit.\nThis \u0026ldquo;option\u0026rdquo; solution can be reformulated in a \u0026lsquo;Trial and error\u0026rsquo; policy. All the things you can try are your options. Notice that you still need some rationality to try options that have some potential, and then recognize a successful trial. Taleb is saying that we rely too much on models and top-down logic, but not that science and formalization are never useful. We still need some. Just much less of it.\nAnd in the end, this is exactly the evolutionary heuristics we use for fuzzers! Each seed is an option the fuzzer has. The fitness function is the way we chose the potential \u0026ldquo;good options\u0026rdquo; for the future.\nVia Negativa  \u0026ldquo;Rule No. 1: Never lose money. Rule No. 2: Don’t forget rule No. 1\u0026rdquo; Warren Buffet\n The other way Taleb suggests to achieve antifragility is to \u0026ldquo;remove the bad stuff\u0026rdquo;. It is not easy to predict what is going to happen, and it may be even harder to take advantage of it. However, it is often quite simple to detect fragility. The via negativa way is: detect the bad and remove it. This you are left with either robust, meaning that it does not have much reaction to shocks, negatively or positively, or antifragile.\n \u0026ldquo;We know a lot more about what is wrong than what is right. Negative knowledge is more robust to error than positive knowledge.\u0026rdquo;\n This is what he calls the \u0026ldquo;barbell\u0026rdquo; strategy. You have the robust part which you can\u0026rsquo;t lose; it is your insurance. And you have the antifragile part, which is riskier, but gives you exposure to different kinds of shocks by being diversified, and makes your profit/payoff. This is not very sophisticated, but in the end, less is more. This technique was lightly sketched out in \u0026ldquo;The Black Swan\u0026rdquo;, but without all of the fragility framework, so it was hard to understand why it would work.\nConclusion Do not be a fool. Do not over-optimize your system thinking you got everything under control. With a thin margin of safety, you risk losing it all. You are never fully safe from a Black Swan unless you set your system up this way.\n","date":1595116800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595116800,"objectID":"d555a84c5e8ccdd48885f91b044dc389","permalink":"/post/antifragile/","publishdate":"2020-07-19T00:00:00Z","relpermalink":"/post/antifragile/","section":"post","summary":" We all want to **predict** the future. Once we know what will happen, we can prepare and take advantage of the situation and become stronger. For example, if you know which stock will go up/down, you would make a lot of money. The ability to predict is the foundation of science: experiment to find *models* that can forecast the future. Nassim Taleb destroyed this idea in his book 'The Black Swan': The most impactful events, the game changers, are unpredictable. ","tags":null,"title":"Antifragile: Why AI fails and alternative","type":"post"},{"authors":["Marcel Böhme","","Sang Kil Cha"],"categories":null,"content":"In this paper, we take the fundamental perspective of fuzzing as a learning process. Suppose before fuzzing, we know nothing about the behaviors of a program P: What does it do? Executing the first test input, we learn how P behaves for this input. Executing the next input, we either observe the same or discover a new behavior. As such, each execution reveals “some amount” of information about P’s behaviors. A classic measure of information is Shannon’s entropy. Measuring entropy allows us to quantify how much is learned from each generated test input about the behaviors of the program. Within a probabilistic model of fuzzing, we show how entropy also measures fuzzer efficiency. Specifically, it measures the general rate at which the fuzzer discovers new behaviors. Intuitively, efficient fuzzers maximize information.\nFrom this information theoretic perspective, we develop En- tropic, an entropy-based power schedule for greybox fuzzing which assigns more energy to seeds that maximize information. We implemented Entropic into the popular greybox fuzzer LibFuzzer. Our experiments with more than 250 open-source programs (60 million LoC) demonstrate a substantially improved efficiency and confirm our hypothesis that an efficient fuzzer maximizes informa- tion. Entropic has been independently evaluated and invited for integration into main-line LibFuzzer. Entropic will run on more than 25,000 machines fuzzing hundreds of security-critical software systems simultaneously and continuously.\nbody{ /* Normal */ font-size: 13pt; }  ","date":1590451200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590451200,"objectID":"b40b6e33ce10db88de2f67684e1dd58b","permalink":"/publication/entropic/","publishdate":"2020-05-26T00:00:00Z","relpermalink":"/publication/entropic/","section":"publication","summary":"Entropic is an information-theoretic power schedule implemented based on LibFuzzer. It boosts performance by changing weights assigned to the seeds in the corpus. Seeds revealing more \"information\" are assigned a higher weight. Entropic has been independently evaluated by a team at Google and invited for integration into mainline LibFuzzer @ LLVM (C++ code base), whereupon Entropic was subject to a substantial code reviewing process.","tags":null,"title":"Boosting Fuzzer Efficiency: An Information Theoretic Perspective","type":"publication"},{"authors":["","Soomin Kim","Sang Kil Cha"],"categories":null,"content":"body{ /* Normal */ font-size: 13pt; }  ","date":1580860800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580860800,"objectID":"3b74209e2270b39e5cbbc56a126644f2","permalink":"/publication/ankou/","publishdate":"2020-02-05T00:00:00Z","relpermalink":"/publication/ankou/","section":"publication","summary":"Grey-box fuzzing is an evolutionary process, which maintains and evolves a population of test cases with the help of a fitness function. Fitness functions used by current grey-box fuzzers are not informative in that they cannot distinguish different program executions as long as those executions achieve the same coverage. The problem is that current fitness functions only consider a union of data, but not their combination. As such, fuzzers often get stuck in a local optimum during their search. In this paper, we introduce Ankou, the first grey-box fuzzer that recognizes different _combinations_ of execution information, and present several scalability challenges encountered while designing and implementing Ankou. Our experimental results show that Ankou is 1.94× and 8.0× more effective in finding bugs than AFL and Angora, respectively.","tags":null,"title":"Ankou: Guiding Grey-box Fuzzing towards Combinatorial Difference","type":"publication"},{"authors":["","HyungSeok Chan","Choongwoo Han","Sang Kil Cha","Manuel Egele","Edward J. Schwartz","Maverick Woo"],"categories":null,"content":"Among the many software testing techniques available today, fuzzing has remained highly popular due to its conceptual simplicity, its low barrier to deployment, and its vast amount of empirical evidence in discovering real-world software vulnerabilities. At a high level, fuzzing refers to a process of repeatedly running a program with generated inputs that may be syntactically or semantically malformed.\n Our survey shows the fuzzing community is extremely vibrant. The recent surge of work by researchers and practitioners alike has made it difficult to gain a comprehensive and coherent view of fuzzing. Thus, it is easy to lose track of the design decisions and potentially important tweaks performed in each tool and paper. Furthermore, there has been an observable fragmentation in the terminology used by various fuzzers. For example, test case \u0026ldquo;minimization\u0026rdquo; and \u0026ldquo;reduction\u0026rdquo; are often used interchangeably. Such fragmentation makes it difficult to discover and disseminate knowledge and may severely hinder the progress in fuzzing research in the long run.\nTo help preserve and bring coherence to the vast literature of fuzzing, this paper presented a unified, general-purpose model of fuzzing together with a taxonomy of the current literature. Our terminology is chosen to closely reflect the current predominant usages, and our model is designed to suit a large number of fuzzing tasks. We surveyed academic papers from the major Security and Software Engineering conferences in the last 10 years, as well as projects having more than 100 stars on GitHub. The paper methodically explores the design decisions at every stage of the model by surveying the related literature and innovations that make modern-day fuzzers effective.\nCompanion Website Our contribution in this work is more than just the survey. Upon receiving the acceptance notice, we have started building a companion website. It is backed by a repository at GitHub, which contains the genealogy and the classification data of the surveyed fuzzers in the JSON format. We plan to keep this site up-to-date periodically through investing our own effort and accepting contributions from the community.\nbody{ /* Normal */ font-size: 13pt; }  ","date":1570665600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570665600,"objectID":"c613964539060f72b7b5ca0b841b7b61","permalink":"/publication/survey/","publishdate":"2019-10-10T00:00:00Z","relpermalink":"/publication/survey/","section":"publication","summary":"This paper surveys both the academic papers and the open-sourced tools in the field of fuzzing. We present a unified, general-purpose model to better understand the design and trade-offs of fuzzers.","tags":null,"title":"The Art, Science, and Engineering of Fuzzing: A Survey","type":"publication"},{"authors":null,"categories":null,"content":"Hi everyone. This is my first \u0026lsquo;technical\u0026rsquo; blog post. I saw some people saying it helps growing your explanation skills which I sincerely lack. Thus, I decided next I struggle doing something because I feel it\u0026rsquo;s quite undocumented, I\u0026rsquo;ll try to make a post and explain how I did it. If even one person reads this and it\u0026rsquo;s even remotely useful to them, I\u0026rsquo;ll consider the job done. Ask any question, I\u0026rsquo;ll be happy to answer.\nNow down to the topic. I have trying to compile the kernel with clang ever since I have seen the LWN.net article on the topic. It says that you \u0026lsquo;just\u0026rsquo; need to go and compile your kernel with make CC=clang. So I went into the linux sources I had at this time (something around 4.9.60) and type the command. Obviously it didn\u0026rsquo;t work.\nTurns out, it\u0026rsquo;s not that much complicated. There are two requirements to compiling your kernel with clang:\n Get the right source and configuration. Get the right version of clang.  Everything is very well summarized on a LKML post from last November: https://lkml.org/lkml/2017/11/22/943.\nConcerning the source, I went for the simplest path: getting the latest stable version of the kernel with default configuration:\ngit clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git cd linux-stable git checkout v4.14.15 make defconfig  Here I\u0026rsquo;m on x86. If you want to compile for ARM64, it seems a bit more complicated. I didn\u0026rsquo;t try it but you might want to look for the android source that have not been upstreamed yet. Posting here because it\u0026rsquo;s not linked in the Matthias Kaehlcke\u0026rsquo;s LKML post:\n https://android.googlesource.com/kernel/common.git/+log/android-4.9 https://android.googlesource.com/kernel/common.git/+log/android-4.4  There also other documentation made by Google here which shows how to compile the kernel with KASAN and KCOV. Didn\u0026rsquo;t dig into that but could be useful to someone.\nIf you are looking for other configuration than just the default one, I didn\u0026rsquo;t try that and I think it\u0026rsquo;s really and a case by case basis. You are going to have to dig a little bit more.\nAnd for the version of clang, you need clang 5 or more. I on Debian Stretch for which LLVM has precompiled binary (see here if you are on another OS version). So add them to your source list:\nsudo vim /etc/apt/sources.list  And then add:\ndeb http://apt.llvm.org/stretch/ llvm-toolchain-stretch-6.0 main deb-src http://apt.llvm.org/stretch/ llvm-toolchain-stretch-6.0 main  Now you can install clang:\nsudo apt-get update sudo apt-get install clang-6.0  If you are not on Debian/Ubuntu, I am not sure whether or not there is another solution than just compiling LLVM directly (see here).\nFinally, we have the source and the compiler, so we are ready to compile. Go in your linux-stable/ folder and:\nmake CC=clang-6.0 -j4 bzImage  I just wanted the bzImage to boot, but you remove it if you want to compile everything. -j4 because gain time by making compilation parallel\u0026hellip; Now I don\u0026rsquo;t know how you plan to use your clang compiled kernel, but just to check it\u0026rsquo;s usable, I run it with qemu:\nqemu-system-x86_64 -kernel arch/x86/boot/bzImage -nographic -serial mon:stdio -append 'console=ttyS0'  And since we didn\u0026rsquo;t provide the -initrd option, it will crash at the end with something like:\n---[ end Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(0,0)  There are plenty of guides on how to use your kernel, not the goal here.\nThat will conclude my first post. Hopefully it was clear enough. Don\u0026rsquo;t hesitate to contact me by any mean if you have any question or problems.\n","date":1515801600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1515801600,"objectID":"946c7d7e3e65e110170533c1396f626c","permalink":"/post/kernel_clang_compile/","publishdate":"2018-01-13T00:00:00Z","relpermalink":"/post/kernel_clang_compile/","section":"post","summary":"Hi everyone. This is my first \u0026lsquo;technical\u0026rsquo; blog post. I saw some people saying it helps growing your explanation skills which I sincerely lack. Thus, I decided next I struggle doing something because I feel it\u0026rsquo;s quite undocumented, I\u0026rsquo;ll try to make a post and explain how I did it. If even one person reads this and it\u0026rsquo;s even remotely useful to them, I\u0026rsquo;ll consider the job done. Ask any question, I\u0026rsquo;ll be happy to answer.","tags":null,"title":"Compiling Linux Kernel with Clang","type":"post"},{"authors":["","Daehee Jang","Chanho Ryu","Brent Byunghoon Kang"],"categories":null,"content":"body{ /* Normal */ font-size: 13pt; }  ","date":1514851200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514851200,"objectID":"02344d0376c2c8b70cd1c8ecfe790ee3","permalink":"/publication/dikernel/","publishdate":"2018-01-02T00:00:00Z","relpermalink":"/publication/dikernel/","section":"publication","summary":"Monolithic kernel is one of the prevalent configurations out of various kernel design models. While monolithic kernel excels in performance and management, they are unequipped forruntime system update; and this brings the need for kernel extension. Although kernel extensions are a convenient measure for system management, it is well established that they make the system prone to rootkit attacks and kernel exploitation as they share the single memory space with the rest of the kernel. To address this problem, various forms of isolation (e.g., making into a process), are so far proposed, yet their performance overhead is often too high or incompatible for a general purpose kernel. In this paper, we propose Domain Isolated Kernel (DIKernel), a new kernel architecture which securely isolates the untrustedkernel extensions with minimal performance overhead. DIKernel leverages hardware-based memory domain feature in ARM architecture; and prevents system manipulation attacks originated from kernel extensions, such as rootkits and exploits caused by buggy kernel extensions. We implemented DIKernel on top of Linux 4.13 kernel with 1500 LOC.  Performance evaluation indicates that DIKernel imposes negligible overhead which is observed by cycle level microbenchmark.","tags":null,"title":"Domain Isolated Kernel: A lightweight sandbox for untrusted kernel extensions","type":"publication"}]